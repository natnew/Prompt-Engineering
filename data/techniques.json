{
    "Zero-Shot Prompting": {
        "description": "In Zero-Shot Prompting, the model receives the prompt directly without any examples or demonstrations. This technique leverages the model's ability to perform tasks it hasn't explicitly been trained on by relying on its vast pre-existing knowledge.",
        "process": [
            "We are now going to apply **Zero-Shot Prompting** to your prompt.",
            "First, we will **take your input prompt as-is**.",
            "Then, we will **send it directly to the model without any modifications**.",
            "Finally, the model will **generate a response based on its pre-trained knowledge**."
        ]
    },
    "Few-Shot Prompting": {
        "description": "Few-Shot Prompting involves providing the model with a small number of examples or demonstrations before asking it to perform a task. These examples help the model understand the desired format, style, or content of the response.",
        "process": [
            "We are now going to apply **Few-Shot Prompting** to your prompt.",
            "First, we will **prepare a few examples related to your task**.",
            "Next, we will **prepend these examples to your input prompt**.",
            "Then, we will **send the combined prompt to the model**.",
            "Finally, the model will **generate a response that follows the patterns in the examples**."
        ]
    },
    "Chain-of-Thought Prompting": {
        "description": "Chain-of-Thought Prompting encourages the model to generate intermediate reasoning steps before arriving at a final answer. By instructing the model to 'think step-by-step,' it breaks down complex problems into smaller, manageable parts.",
        "process": [
            "We are now going to apply **Chain-of-Thought Prompting** to your prompt.",
            "First, we will **take your input prompt**.",
            "Next, we will **append an instruction to think step-by-step**.",
            "Then, we will **send the modified prompt to the model**.",
            "Finally, the model will **provide a detailed reasoning process along with the answer**."
        ]
    },
    "Meta-Prompting": {
        "description": "Meta-Prompting involves asking the model to generate or refine prompts themselves. This technique leverages the model's understanding of language structures and task requirements to produce more precise and effective prompts.",
        "process": [
            "We are now going to apply **Meta-Prompting** to your prompt.",
            "First, we will **ask the model to create a detailed prompt based on your task**.",
            "Then, we will **use the generated prompt to elicit a response from the model**.",
            "Finally, the model will **provide a response that aligns with the refined prompt**."
        ]
    },
    "Self-Consistency Prompting": {
        "description": "Self-Consistency Prompting encourages the model to produce responses that are logically coherent and consistent across similar tasks. By exploring multiple reasoning paths, the model can enhance the reliability of its outputs.",
        "process": [
            "We are now going to apply **Self-Consistency Prompting** to your prompt.",
            "First, we will **take your input prompt**.",
            "Next, we will **instruct the model to ensure consistency and logical coherence**.",
            "Then, we will **send the modified prompt to the model**.",
            "Finally, the model will **generate a consistent and coherent response**."
        ]
    },
    "Tree-of-Thought Prompting": {
        "description": "Tree-of-Thought Prompting encourages the model to explore multiple reasoning paths or solutions before arriving at a final answer. This method promotes creative thinking and problem-solving in complex or open-ended tasks.",
        "process": [
            "We are now going to apply **Tree-of-Thought Prompting** to your prompt.",
            "First, we will **take your input prompt**.",
            "Next, we will **instruct the model to consider multiple approaches and evaluate them**.",
            "Then, we will **send the modified prompt to the model**.",
            "Finally, the model will **provide an optimized response after exploring different options**."
        ]
    },
    "Context Engineering": {
        "description": "Context Engineering involves strategically managing and optimizing the context window to improve model performance. This includes techniques like context compression, dynamic context adjustment, and contextual prompt chaining to maintain coherence across complex tasks.",
        "process": [
            "We are now going to apply **Context Engineering** to your prompt.",
            "First, we will **analyze the context requirements for your task**.",
            "Next, we will **optimize the context structure and format**.",
            "Then, we will **apply context compression or expansion as needed**.",
            "Finally, the model will **generate a response using the optimized context**."
        ]
    },
    "RAG Prompting": {
        "description": "Retrieval-Augmented Generation (RAG) Prompting combines external knowledge sources with the model's internal knowledge. This technique retrieves relevant information from databases or documents and incorporates it into the prompt for more accurate and up-to-date responses.",
        "process": [
            "We are now going to apply **RAG Prompting** to your prompt.",
            "First, we will **identify relevant external knowledge sources**.",
            "Next, we will **retrieve pertinent information related to your query**.",
            "Then, we will **integrate the retrieved information with your prompt**.",
            "Finally, the model will **generate a response informed by both internal and external knowledge**."
        ]
    },
    "Reflection Prompting": {
        "description": "Reflection Prompting enables the model to engage in self-correction and iterative improvement. The model is explicitly prompted to reflect on its own reasoning, identify potential errors, and refine its responses through multiple passes.",
        "process": [
            "We are now going to apply **Reflection Prompting** to your prompt.",
            "First, we will **generate an initial response to your prompt**.",
            "Next, we will **prompt the model to reflect on and critique its response**.",
            "Then, we will **ask the model to identify improvements or corrections**.",
            "Finally, the model will **provide a refined response based on its reflection**."
        ]
    },
    "Constitutional AI": {
        "description": "Constitutional AI prompting generates value-aligned responses through principle-based reasoning. The model is given a set of principles or constitution to follow, enabling it to self-correct and align its outputs with specified values and guidelines.",
        "process": [
            "We are now going to apply **Constitutional AI** prompting to your prompt.",
            "First, we will **establish the constitutional principles to follow**.",
            "Next, we will **generate an initial response to your prompt**.",
            "Then, we will **evaluate the response against the constitutional principles**.",
            "Finally, the model will **provide a revised response that aligns with the specified values**."
        ]
    }
}

